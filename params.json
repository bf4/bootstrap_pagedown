{"name":"Bootstrap pagedown","tagline":"Bootstrap Pagedown for rails","body":"# Bootstrap Pagedown\r\n[![Build Status](https://secure.travis-ci.org/cloverinteractive/bootstrap_pagedown.png?branch=master)](http://travis-ci.org/cloverinteractive/bootstrap_pagedown)\r\n\r\nIt's a rails version of Bootstrap Pagedown with it's own form builder.\r\n\r\n## Setup\r\n\r\nAdd it to your Gemfile then run `bundle` to install it.\r\n\r\n```ruby\r\ngem \"bootstrap_pagedown\"\r\n```\r\n\r\nThen add it to your Asset Pipeline manifest files:\r\n\r\n```javascript\r\n// application.js\r\n//= require bootstrap_pagedown\r\n```\r\n\r\n```css\r\n/*\r\n* application.css\r\n*= require bootstrap_pagedown\r\n*/\r\n```\r\n\r\n## Creating the editor\r\n\r\nSimply add this to the javascript file where you wish to create the editor:\r\n\r\n```javascript\r\nvar converter = Markdown.getSanitizingConverter();\r\nvar editor    = new Markdown.Editor( converter );\r\n\r\neditor.run();\r\n```\r\n\r\nOr in coffeescript:\r\n\r\n```coffeescript\r\nconverter = Markdown.getSanitizingConverter()\r\neditor    = new Markdown.Editor converter\r\n\r\neditor.run();\r\n```\r\n\r\n### Pagedown extras\r\n\r\nIf you wish to use [pagedown-extra](https://github.com/jmcmanus/pagedown-extra) simply add this line before `editor.run()`:\r\n\r\n```javascript\r\nMarkdown.Extra.init( converter );\r\n```\r\n\r\nOr in coffeescript:\r\n\r\n```coffeescript\r\nMarkdown.Extra.init converter\r\n```\r\n\r\nKeep in mind that `converter` should be replaced by whatever you named your converter variable to.\r\n\r\n## Requirements\r\n\r\nThis plugin requires bootstrap to work as intended.\r\n\r\n## Form builder\r\n\r\nTo use with rails form simply do the following:\r\n\r\n```erb\r\n<%= form_for @page do |f| %>\r\n  <%= f.pagedown_editor :body\r\n<% end %>\r\n```\r\n\r\nThis will generate the necessary HTML to render the Markdown editor for the `body` property of our `Page` model.\r\n\r\nYou may also add attributes to the generated text area as needed by simply adding them after the method name:\r\n\r\n```erb\r\n<%= f.pagedown_editor :body, 'data-name' => 'editor'\r\n```\r\n\r\nThe previous example would add `data-name=\"editor\"` to the editor textarea element.\r\n\r\n### Custom options supported:\r\n\r\nBy default bootstrap_pagedown will create the needed HTML elements to render a functional editor with a button bar and a preview div.\r\nHowever you can change the different element classes, ids and even skip the preview div by passing different options to the `pagedown_editor`\r\nmethod, here's the hash with different options and it's default values:\r\n\r\n```ruby\r\n{\r\n  skip_preview:     false,             # Whether or not we should skip the preview div, skipping this will render an editor without HTML preview\r\n  panel_id:         '',                # HTML id of the editor panel div\r\n  panel_class:      'wmd-panel',       # HTML class of the editor panel div\r\n  button_bar_id:    'wmd-button-bar',  # HTML id of the editor's button bar div\r\n  button_bar_class: '',                # HTML class of the editor's button bar div\r\n  editor_id:        'wmd-input',       # HTML if of the editor textarea\r\n  editor_class:     'wmd-input',       # HTML class of the editor textarea\r\n  preview_id:       'wmd-preview',     # HTML id of the preview div\r\n  preview_class:    '',                # HTML class of the preview div\r\n}\r\n```\r\n\r\nThis is a the default generated HTML, note that name will change depending on your form builder and method name.\r\n\r\n```html\r\n<div class=\"wmd-panel\">\r\n  <div id=\"wmd-button-bar\"></div>\r\n  <textarea class=\"wmd-input\" id=\"wmd-input\" name=\"test[test]\"></textarea>\r\n  <div id=\"wmd-preview\"></div>\r\n</div>\r\n```\r\n\r\nIf you change the any of the default ids or classes on the HTML elements the `pagedown_editor` will render the correct HTML, but the editor won't render\r\nthat is because by default Pagedown looks for those element attribute values, however you can still get the editor to render and behave correctly through the\r\n[Pagedown API](https://code.google.com/p/pagedown/wiki/PageDown). I other words in order to have more than one editor in the same page you'll obviously have to\r\nchange the element attributes and the use the Pagedown API to create every aditional editor.\r\n\r\n## Stylesheets\r\n\r\nIf you need to change something on the stylesheets you don't need to start from scratch, you can simply generate the sass file with the sass generator as follows:\r\n\r\n`rails g bootstrap_pagedown:sass`\r\n\r\nThis will generate a copy of bootstrap_pagedown styles into `app/assets/stylesheets`.\r\n\r\n## Running the test suite\r\n\r\nSimply clone this project (or pull) and then run `rake`\r\n\r\n## Running the dummy app\r\n\r\nGo into the `spec/dummy` directory and run `rails s` then in your web browser visit `http://localhost:3000`, you should see a blank page with the editor.\r\n\r\n## License\r\n\r\nThis project uses the MIT license, please read the `MIT-LICENSE` file included with this project\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}